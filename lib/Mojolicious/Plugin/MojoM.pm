# MojoM used for simple create models into Mojo code.
package Mojolicious::Plugin::MojoM;
use Mojo::Base 'Mojolicious::Plugin';
use Storable 'freeze';

has models => sub {{}};
has model  => undef;

sub add_model {
    my ( $self, $key, $val ) = @_;
    
    $self->models ({
        %{$self->models},
        $key => $val
    });
}

sub register {
    my ( $mojom, $app, $conf ) = @_;
    
    # Init DB.
    # Make Base Class.
    {
        mkdir './lib/Mojolicious/Plugin/MojoM/Model';
        my $path = "./lib/Mojolicious/Plugin/MojoM/Config.pm";
        
        my $code  = freeze( $conf );
        
        open  FILE, "> $path" or die "[-] Cann't write into file $path";
        print FILE
<<"CODE"
            
        # Autogenerated by MojoM.
        # Be careful when edit it.
        
        package Mojolicious::Plugin::MojoM::Config;

        use base 'Rose::DB';

        __PACKAGE__->use_private_registry;
        __PACKAGE__->default_connect_options( mysql_enable_utf8 => 1 );
        
        use Storable 'thaw';

        my \$a = thaw('$code');

        __PACKAGE__->register_db ( \%\$a );

        1;

CODE
;       close FILE;
    }
    
    $app->helper (
        model => sub {
            my ( $self, $name ) = @_;
            
            return $self unless $name;
            
            $mojom->model($name);
            $mojom->add_model( $name => 1 ) unless exists $mojom->models->{$name};
            
            return $self;
        }
    );
        
    $app->helper (
        init => sub {
            my ( $self, @fields ) = @_;
            
            return $self unless @fields;
            
            my $code  = freeze( \@fields );
            my $name  = $mojom->model;
            my $class = "Mojolicious::Plugin::MojoM::Model::$name";
            my $path  = "./lib/$class.pm";
               $path  =~ s/\:\:/\//g;
               
            open  FILE, "> $path" or die "[-] Cann't write into file $path";
            print FILE
<<"CODE"
            
            # Autogenerated by MojoM.
            # Be careful when edit it.
            
            package Mojolicious::Plugin::MojoM::Model::$name;
            
            use base 'Mojolicious::Plugin::MojoM::Base';
            use Storable 'thaw';

            my \$a = thaw('$code');

            __PACKAGE__->meta->setup( \@\$a );

            1;

CODE
;           close FILE;
            
            return $self;
        }
    );
    
    $app->helper (
        get => sub {
            my ( $self, @fields ) = @_;
            
            my $name  = $mojom->model;
            my $class = "Mojolicious::Plugin::MojoM::Model::$name";
            
            eval "require $class";
            
            my $obj = $class->new(@fields)->load(speculative => 1);
            
            return $obj if $obj;
            
            $app->log->error( "Cann't find $name with params\n" . $app->dumper(\@fields) );
            
            return 0;
        }
    );
    
}

1;

__END__

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011, Georgy Bazhukov.

This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.

=cut

